using UnityEditor;
using UnityEngine;
using UnityEngine.InputSystem;

public class PlayerController : MonoBehaviour
{
    // Input handling using the CustomInputs class generated by the Input System
    private CustomInputs playerControls;
    private InputAction _moveInput = null;
    private InputAction _jumpInput = null;
    private InputAction _runInput = null;

    // Rigidbody component for controlling the player's physics
    private Rigidbody _rb = null;

    // Ground checking variables
    [SerializeField] Transform groundCheck;
    [SerializeField] private LayerMask groundLayer;
    [SerializeField] private float groundCheckRadius = 0.1f;

    // Movement parameters
    [SerializeField] private float moveSpeed = 10f;
    [SerializeField] private float runSpeedMultiplier = 3f;
    [SerializeField] private float jumpForce = 10f;
    private float _gravity = -9.81f; // Adjust this value for stronger/weaker gravity

    // Flag to check if the player is grounded
    private bool _isGrounded = false;

    private void Awake()
    {
        // Initialize the input controls and get the Rigidbody component
        playerControls = new CustomInputs();
        _rb = GetComponent<Rigidbody>();
    }

    private void OnEnable()
    {
        // Enable input actions when the script is enabled
        _jumpInput = playerControls.Player.Jump;
        _jumpInput.Enable();

        _moveInput = playerControls.Player.Movement;
        _moveInput.Enable();

        _runInput = playerControls.Player.Run;
        _runInput.Enable();
    }

    private void OnDisable()
    {
        // Disable input actions when the script is disabled
        _jumpInput.Disable();
        _moveInput.Disable();
        _runInput.Disable();
    }

    private void FixedUpdate()
    {
        // Call the Move method in FixedUpdate for physics-related updates
        Move();
    }

    private void Update()
    {
        // Check if the player is grounded in the Update method
        _isGrounded = IsGrounded();
    }

    private void Move()
    {
        // Read input values for movement and run actions
        float moveInput = _moveInput.ReadValue<Vector3>().x;
        float runInput = _runInput.ReadValue<float>();

        // Adjust move speed based on run input
        float currentMoveSpeed = moveSpeed * (runInput > 0.5f ? runSpeedMultiplier : 1f);
        Vector3 newVelocity = _rb.velocity;

        // Apply horizontal movement
        newVelocity.x = moveInput * currentMoveSpeed;

        // Check for jump input and apply vertical velocity if grounded
        if (_isGrounded && _jumpInput.ReadValue<float>() > 0.5f)
        {
            Debug.Log("Jumped");
            newVelocity.y = Mathf.Sqrt(2f * jumpForce * -_gravity);
        }

        // Apply gravity
        newVelocity.y += _gravity * Time.fixedDeltaTime;

        // Update the Rigidbody velocity
        _rb.velocity = newVelocity;
    }

    private bool IsGrounded()
    {
        // Check if the player is grounded using a sphere cast
        return Physics.CheckSphere(groundCheck.position, groundCheckRadius, groundLayer);
    }

    private void OnDrawGizmos()
    {
        Gizmos.DrawWireSphere(groundCheck.position, groundCheckRadius);
    }
}
